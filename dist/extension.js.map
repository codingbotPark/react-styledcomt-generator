{"version":3,"file":"extension.js","mappings":"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","sources":["webpack://react-styledcomponent-file-generator/./src/content/dynamicContent.ts","webpack://react-styledcomponent-file-generator/./src/content/staticContent.ts","webpack://react-styledcomponent-file-generator/./src/functions/addContentFn.ts","webpack://react-styledcomponent-file-generator/./src/functions/createNewFileFn.ts","webpack://react-styledcomponent-file-generator/./src/functions/tools/getInputFn.ts","webpack://react-styledcomponent-file-generator/./src/functions/util/getFSPathFn.ts","webpack://react-styledcomponent-file-generator/./src/service/makeRSCWithMenu.ts","webpack://react-styledcomponent-file-generator/./src/service/makeRSFile.ts","webpack://react-styledcomponent-file-generator/external commonjs \"vscode\"","webpack://react-styledcomponent-file-generator/webpack/bootstrap","webpack://react-styledcomponent-file-generator/./src/extension.ts"],"sourcesContent":["import * as vscode from \"vscode\"\r\n\r\n/**\r\n * @param fileName 되도록이면 파일의 경로를 제외한 파일이름\r\n * @returns 완성된 react component기본세팅\r\n */\r\nexport function componentContentProvider(fileName:string){\r\n\r\n    const styleFileName = getStyleFileName(getFileNameFromPath(fileName))\r\n    const onlyName = fileName.split(\".\")[0]\r\n    const extension = vscode.workspace.getConfiguration(\"CRSC-format\").get(\"FileExtension\")\r\n\r\n    return `\\\r\nimport React from 'react';\r\nimport * as ${styleFileName} from \"./${onlyName}.style\"\r\n\r\nconst ${onlyName} = () => {\r\n    return (\r\n        <${styleFileName}.Wrapper>\r\n\r\n        </${styleFileName}.Wrapper>\r\n    )\r\n}\r\n\r\nexport default ${onlyName};\r\n`\r\n}\r\n\r\nfunction getStyleFileName(fileName:string){\r\n    let styleFileNamingWay = vscode.workspace.getConfiguration(\"CRSC-format\").get(\"ImportStyleFileName\")\r\n    if (styleFileNamingWay === \"ComponentFirstLetter\"){\r\n        return fileName[0]\r\n    } else if (styleFileNamingWay === \"S\"){\r\n        return \"S\"\r\n    } else if (styleFileNamingWay === \"otherThing\"){\r\n        let otherLetter = vscode.workspace.getConfiguration(\"CRSC-format\").get(\"CustomImportName\")\r\n        // otherLetter가 아무 것도 없을 때는 그냥 S를 리턴\r\n        return otherLetter ?? \"S\"\r\n    }\r\n}\r\n\r\nfunction getFileNameFromPath(fileName:string):string{\r\n    const filteredFileName = fileName.split(\"\\\\\").at(-1)\r\n    if (filteredFileName) {\r\n        return filteredFileName\r\n    } else {\r\n        vscode.window.showErrorMessage(\"잘못된 fileName이 들어와서 reactFile을 만드는데 실패했습니다\")\r\n        throw new Error(\"잘못된 fileName이 들어왔습니다\")\r\n    }\r\n}","export const styleFile = \r\n`\\\r\nimport styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div\\`\r\n\r\n\\`\r\n\r\n`\r\n","import * as vscode from \"vscode\"\r\n\r\n/** 주어진 파일에 주어진 문자열을 추가 */\r\nexport async function addContentFn({\r\n    filePath,\r\n    replaceStr\r\n}:{\r\n    filePath:string,\r\n    replaceStr:string\r\n}){\r\n    const uri = vscode.Uri.file(filePath);\r\n    const WSEdit = new vscode.WorkspaceEdit();\r\n    const position = new vscode.Position(0,0);\r\n    WSEdit.insert(uri,position,replaceStr);\r\n    const success = await vscode.workspace.applyEdit(WSEdit);\r\n    return success\r\n}","import * as vscode from \"vscode\"\r\n\r\nexport async function createNewFileFn(path:string){\r\n    let WSEdit = new vscode.WorkspaceEdit();\r\n\r\n    const filePath = vscode.Uri.file(path)\r\n    WSEdit.createFile(filePath,{ignoreIfExists:true});\r\n    await vscode.workspace.applyEdit(WSEdit);\r\n}","import * as vscode from \"vscode\"\r\n\r\nexport async function getInputFn({\r\n    placeHolder,prompt,value\r\n}:{\r\n    placeHolder:string,\r\n    prompt:string,\r\n    value:string\r\n}){\r\n    const userText = await vscode.window.showInputBox({\r\n        placeHolder:placeHolder,\r\n        prompt:prompt,\r\n        value:value,\r\n    })\r\n    if (userText === undefined){\r\n        vscode.window.showErrorMessage(`there is no value for \"${prompt}\"`)\r\n        throw new Error(`there is no value for \"${prompt}\"`)\r\n    }\r\n    return userText\r\n}","import * as vscode from \"vscode\"\r\n\r\nexport function getFSPath(){\r\n    if(vscode.workspace.workspaceFolders !== undefined) {\r\n        // window\r\n        // let wf = vscode.workspace.workspaceFolders[0].uri.path ;\r\n        // let uri = vscode.Uri.file(f+\"/hi\");\r\n        // let success = await vscode.commands.executeCommand('vscode.openFolder', uri);\r\n\r\n        let f = vscode.workspace.workspaceFolders[0].uri.fsPath ; \r\n        vscode.window.showInformationMessage(f);\r\n\r\n        return f    \r\n    } \r\n    else {\r\n        let message = \"YOUR-EXTENSION: Working folder not found, open a folder an try again\" ;\r\n    \r\n        vscode.window.showErrorMessage(message);\r\n    }\r\n    throw new Error(\"error on getFSPathFn\")\r\n}\r\n\r\n","import * as vscode from \"vscode\"\r\nimport { makeRSFile } from \"./makeRSFile\";\r\n\r\n/** \r\n * folder 선택으로 RSC생성\r\n * 따라서 folderPath를 가져오는 작업을 하고 makeRSFile함수를 실행\r\n */\r\nexport async function makeRSCWithMenu(folder:string){\r\n    if (folder){ // clipboard를 활용해 path를 가져온다\r\n        // 원래 복사한 것\r\n        const originClipboard = await vscode.env.clipboard.readText();\r\n\r\n        await vscode.commands.executeCommand('copyFilePath');\r\n        const folderPath = await vscode.env.clipboard.readText();\r\n\r\n        await vscode.env.clipboard.writeText(originClipboard);\r\n\r\n        makeRSFile(folderPath)\r\n    }\r\n}","import * as vscode from \"vscode\";\r\nimport { getFSPath } from \"../functions/util/getFSPathFn\";\r\nimport { getInputFn } from \"../functions/tools/getInputFn\";\r\nimport { createNewFileFn } from \"../functions/createNewFileFn\";\r\nimport { styleFile } from \"../content/staticContent\";\r\nimport { addContentFn } from \"../functions/addContentFn\";\r\nimport { componentContentProvider } from \"../content/dynamicContent\";\r\n\r\n/**\r\n *\r\n * @param folderPath folder의 path, 없다면 현재 WS의 위치이다\r\n */\r\nexport function makeRSFile(folderPath: string = getFSPath()) {\r\n  let language = vscode.workspace\r\n    .getConfiguration(\"CRSC-format\")\r\n    .get(\"FileExtension\");\r\n\r\n  let userText = `${folderPath}\\\\${folderPath.split(\"\\\\\").at(-1)}.${language}x`;\r\n\r\n  getInputFn({\r\n    placeHolder: \"[fileNameWithPath].[jsx|tsx]\",\r\n    prompt: `create new 'CRSC' file => [fileNameWithPath].[jsx|tsx], selected language is ${language}x (extension can be set with 'CRSC-format.FileExtension')`,\r\n    value: userText,\r\n  }).then(async (componentPath) => {\r\n    // 선택된 폴더도 없고, 입력도 되지 않았을 때\r\n    if (componentPath === \"\") {\r\n      vscode.window.showErrorMessage(\r\n        \"do not work because there is no selected file & entered file name\"\r\n      );\r\n      return;\r\n    }\r\n\r\n    /**@todo 생성할 때 이미있는 파일이면 link만 시키기, \r\n     * 아마 생성이 원래 있으면 되지 않음 */\r\n    // jsx | tsx와 style.js | ts를 만들어준다\r\n    await createNewFileFn(componentPath).then(() => {\r\n        const componentName = componentPath.split(\"\\\\\").at(-1)\r\n        \r\n        if (!componentName) {\r\n            throw new Error(\"componentName을 split한 값이 undefined입니다\")\r\n        }\r\n\r\n        addContentFn({\r\n            filePath:componentPath,\r\n            replaceStr:componentContentProvider(componentName)\r\n        })\r\n    });\r\n\r\n    // 확장자는 하나뿐이기 때문에 . 을 사용\r\n    const styledFilePath = `${componentPath.split(\".\")[0]}.style.${language}`;\r\n    await createNewFileFn(styledFilePath).then(() => {\r\n      addContentFn({\r\n        filePath:styledFilePath,\r\n        replaceStr:styleFile\r\n      })\r\n    });\r\n\r\n    vscode.commands.executeCommand(\"vscode.open\",vscode.Uri.file(componentPath));\r\n  });\r\n}\r\n","module.exports = require(\"vscode\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import * as vscode from 'vscode';\r\nimport { makeRSCWithMenu } from './service/makeRSCWithMenu';\r\nimport { makeRSFile } from './service/makeRSFile';\r\n\r\nexport function activate(context: vscode.ExtensionContext) {\r\n\r\n\tlet getWithCommand = vscode.commands.registerCommand('react-styledcomponent-file-generator.createRSC', () => {\r\n\t\tmakeRSFile()\r\n\t});\r\n\t\r\n\t\r\n\tlet getWithMenu = vscode.commands.registerCommand('react-styledcomponent-file-generator.createRSCWithMenu', async (folder) => {\r\n\t\tmakeRSCWithMenu(folder)\r\n\t});\r\n\t\r\n\tcontext.subscriptions.push(getWithCommand,getWithMenu);\r\n}\r\n\r\nexport function deactivate() {}\r\n"],"names":["fileName","styleFileName","styleFileNamingWay","vscode","workspace","getConfiguration","get","getStyleFileName","filteredFileName","split","at","window","showErrorMessage","Error","getFileNameFromPath","onlyName","styleFile","async","filePath","replaceStr","uri","Uri","file","WSEdit","WorkspaceEdit","position","Position","insert","applyEdit","path","createFile","ignoreIfExists","placeHolder","prompt","value","userText","showInputBox","undefined","workspaceFolders","f","fsPath","showInformationMessage","message","folder","originClipboard","env","clipboard","readText","commands","executeCommand","folderPath","writeText","makeRSFile","getFSPath","language","getInputFn","then","componentPath","createNewFileFn","componentName","addContentFn","componentContentProvider","styledFilePath","module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","context","getWithCommand","registerCommand","getWithMenu","makeRSCWithMenu","subscriptions","push"],"sourceRoot":""}